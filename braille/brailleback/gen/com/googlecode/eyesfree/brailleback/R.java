/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.googlecode.eyesfree.brailleback;

public final class R {
    public static final class array {
        /**  Command descriptions, shown on the help screen 
         */
        public static final int help_commandDescriptions=0x7f090005;
        /**  Names of commands that are supported by BrailleBack and
       in what order they are presented in the keyboard help 
         */
        public static final int help_supportedCommands=0x7f090004;
        public static final int pref_braille_type_entries=0x7f090001;
        public static final int pref_braille_type_values=0x7f090000;
        public static final int pref_log_level_entries=0x7f090002;
        public static final int pref_log_level_values=0x7f090003;
    }
    public static final class attr {
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int cellHeight=0x7f010002;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int cellPadding=0x7f010003;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int cellWidth=0x7f010001;
        /**  Dots are drawn with their centres along an inner rectangle,
             which is of maximum size cellWidth x cellHeight. This inner
             rectangle is surrounded by the given amount of cell padding.
             The cell padding should always be greater than the dot radius. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int dotRadius=0x7f010000;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int highlightDrawable=0x7f010004;
    }
    public static final class bool {
        public static final int pref_braille_overlay_default=0x7f0a0000;
    }
    public static final class color {
        public static final int search_overlay=0x7f070000;
    }
    public static final class dimen {
        public static final int overlay_cell_height=0x7f080004;
        public static final int overlay_cell_padding=0x7f080005;
        public static final int overlay_cell_width=0x7f080003;
        public static final int overlay_dot_radius=0x7f080002;
        public static final int overlay_pan_button_padding=0x7f080000;
        public static final int overlay_text_size=0x7f080001;
        public static final int overlay_tutorial_margin=0x7f080007;
        public static final int overlay_tutorial_padding=0x7f080006;
        public static final int overlay_tutorial_small_margin=0x7f080008;
        public static final int search_text_font_size=0x7f080009;
    }
    public static final class drawable {
        public static final int ic_next=0x7f020000;
        public static final int ic_prev=0x7f020001;
        public static final int icon=0x7f020002;
    }
    public static final class id {
        public static final int braille_view=0x7f0b0006;
        public static final int closeButton=0x7f0b000d;
        public static final int doNotShowCheckBox=0x7f0b000c;
        public static final int icon=0x7f0b0000;
        public static final int instructions=0x7f0b0003;
        public static final int instructionsGeneral=0x7f0b000a;
        public static final int instructionsSpecific=0x7f0b000b;
        public static final int list=0x7f0b0004;
        public static final int pan_demo=0x7f0b0008;
        public static final int pan_left_button=0x7f0b0005;
        public static final int pan_right_button=0x7f0b0007;
        public static final int routing_key_demo=0x7f0b0009;
        public static final int summary=0x7f0b0002;
        public static final int title=0x7f0b0001;
    }
    public static final class layout {
        public static final int braille_ime=0x7f030000;
        public static final int key_bindings=0x7f030001;
        public static final int overlay=0x7f030002;
        public static final int overlay_tutorial_activity=0x7f030003;
        public static final int search_tutorial_activity=0x7f030004;
    }
    public static final class raw {
        public static final int chime_down=0x7f050000;
        public static final int chime_up=0x7f050001;
        public static final int complete=0x7f050002;
        public static final int display_connected=0x7f050003;
        public static final int display_disconnected=0x7f050004;
        public static final int double_beep=0x7f050005;
        public static final int keytables=0x7f050006;
        public static final int translationtables=0x7f050007;
    }
    public static final class string {
        public static final int app_name=0x7f06007b;
        /**  Name of the input method for typing using the braille keys on the display. 
         */
        public static final int braille_ime_name=0x7f060098;
        /**  Label shown when the BrailleBack input method is active. 
         */
        public static final int braille_keyboard_active=0x7f0600c8;
        /**  Title for the brailleback, preferences activity. 
         */
        public static final int brailleback_setup_title=0x7f060096;
        public static final int checkmark_checked=0x7f0600a4;
        public static final int checkmark_not_checked=0x7f0600a3;
        /**  Displayed to the user after failing to initialize a braille display. The service was able to establish a connection to the device, but then, the driver failed to initialize. Contains the bluetooth name of the display.
         */
        public static final int connprog_failed_to_initialize=0x7f06007f;
        /**  Displayed to the user when a braile device was found and the display driver is being initialized. Contains the bluetooth name of the display. 
         */
        public static final int connprog_initializing=0x7f06007e;
        /**  Displayed to the user when there are no bonded devices that brailleback recognizes as braille display. 
         */
        public static final int connprog_no_devices=0x7f060080;
        /**  Displayed to the user when trying to connect to a braille display. Contains the bluetooth name of the display. 
         */
        public static final int connprog_trying=0x7f06007d;
        /**  Shown under the Status preference when a braille display is connected. 
         */
        public static final int connstate_connected=0x7f0600b9;
        /**  Shown under the Status preference when the braille display service is not available. 
         */
        public static final int connstate_error=0x7f0600ba;
        /**  Shown under the Status preference when no braille display is connected. 
         */
        public static final int connstate_not_connected=0x7f0600b8;
        /**  Shown on the display when connected to the device. This string has a short size limit to fit on small braille displays. It should not be capitalized, because that can take up extra space on the display. [CHAR_LIMIT=12]
         */
        public static final int display_connected=0x7f0600c6;
        /**  The delimiters between individual keys in a key combination 
         */
        public static final int help_keyBindingDelimiter=0x7f060093;
        /**  Shown in the keyboard help screen.  Template for a key combination that needs to be pressed and held down for a moment (long press) 
         */
        public static final int help_longPressTemplate=0x7f060094;
        /**  Text for the dialog that lets the user know to switch to the braille hardware keyboard input method. 
         */
        public static final int ime_setup_need_default_message=0x7f06009f;
        /**  Label for a button in the dialog that lets the user know to switch to the braille hardware keyboard input method. Opens the system dialog that lets the user switch to an input method. [CHAR_LIMIT=60] 
         */
        public static final int ime_setup_need_default_positive=0x7f0600a0;
        /**  Title for the dialog that lets the user know to switch to the braille hardware keyboard input method. 
         */
        public static final int ime_setup_need_default_title=0x7f06009e;
        /**  Dialog message that lets the user know to enable the input method 
         */
        public static final int ime_setup_need_enable_message=0x7f06009b;
        /**  Button in the enable braille hardware keyboard input method wizard that opens the system dialog to enable the ime. [CHAR_LIMIT=45] 
         */
        public static final int ime_setup_need_enable_positive=0x7f06009d;
        /**  Title for the step of the braille hardware keyboard wizard that lets the user know to enable the input method. 
         */
        public static final int ime_setup_need_enable_title=0x7f06009a;
        /**  Label for a button in the braille input method wizard that lets the user skip the setup. [CHAR_LIMIT=15] 
         */
        public static final int ime_setup_skip=0x7f06009c;
        /**  Title for the wizard that guides the user through the process of setting up the braille hardware keyboard. 
         */
        public static final int ime_setup_wizard_name=0x7f060099;
        /**  APH Refreshabraille keys 
 Name for the advance left key on an APH Refreshabraille display. 
         */
        public static final int key_APH_AdvanceLeft=0x7f060043;
        /**  Name for the advance right key on an APH Refreshabraille display. 
         */
        public static final int key_APH_AdvanceRight=0x7f060044;
        /**  Name for the control key on the braillepen display. 
         */
        public static final int key_BP_Control=0x7f060021;
        /**  Name for the scroll left key on the braille pen display. 
         */
        public static final int key_BP_ScrollLeft=0x7f060022;
        /**  Name for the scroll right key on the braille pen display. 
         */
        public static final int key_BP_ScrollRight=0x7f060023;
        /**  BraillePen keys 
 Name for the shift key on the braillepen display. 
         */
        public static final int key_BP_Shift=0x7f060020;
        /**  Keys that are common on most displays 
 Name for the backspace key on the braille display. 
         */
        public static final int key_Backspace=0x7f060000;
        /**  Name of the backward key on a braille display 
         */
        public static final int key_Backward=0x7f060014;
        /**  Name for the key that represents braille dot 1 on the braille display. 
         */
        public static final int key_Dot1=0x7f060002;
        /**  Name for the key that represents braille dot 2 on the braille display. 
         */
        public static final int key_Dot2=0x7f060003;
        /**  Name for the key that represents braille dot 3 on the braille display. 
         */
        public static final int key_Dot3=0x7f060004;
        /**  Name for the key that represents braille dot 4 on the braille display. 
         */
        public static final int key_Dot4=0x7f060005;
        /**  Name for the key that represents braille dot 5 on the braille display. 
         */
        public static final int key_Dot5=0x7f060006;
        /**  Name for the key that represents braille dot 6 on the braille display. 
         */
        public static final int key_Dot6=0x7f060007;
        /**  Name for the key that represents braille dot 7 on the braille display. 
         */
        public static final int key_Dot7=0x7f060008;
        /**  Name for the key that represents braille dot 8 on the braille display. 
         */
        public static final int key_Dot8=0x7f060009;
        /**  Name of a numbered function key on a braille display. 
         */
        public static final int key_F1=0x7f060010;
        /**  Name of a numbered function key on a braille display. 
         */
        public static final int key_F2=0x7f060011;
        /**  Name of a numbered function key on a braille display. 
         */
        public static final int key_F3=0x7f060012;
        /**  Name of a numbered function key on a braille display. 
         */
        public static final int key_F4=0x7f060013;
        /**  Name of the forward key on a braille display 
         */
        public static final int key_Forward=0x7f060015;
        /**  Key name representing pressing the joystick in the center on the braille display. 
         */
        public static final int key_JoystickCenter=0x7f06000f;
        /**  Key name representing pressing the joystick down on the braille display. 
         */
        public static final int key_JoystickDown=0x7f06000e;
        /**  Key name representing pressing the joystick left on the braille display. 
         */
        public static final int key_JoystickLeft=0x7f06000b;
        /**  Key name representing pressing the joystick right on the braille display. 
         */
        public static final int key_JoystickRight=0x7f06000c;
        /**  Key name representing pressing the joystick up on the braille display. 
         */
        public static final int key_JoystickUp=0x7f06000d;
        /**  Key name representing pressing the left joystick in the center on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_LeftJoystickCenter=0x7f06001a;
        /**  Key name representing pressing the left joystick down on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_LeftJoystickDown=0x7f060019;
        /**  Key name representing pressing the left joystick left on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_LeftJoystickLeft=0x7f060016;
        /**  Key name representing pressing the left joystick right on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_LeftJoystickRight=0x7f060017;
        /**  Key name representing pressing the left joystick up on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_LeftJoystickUp=0x7f060018;
        /**  Key name representing pressing the right joystick in the center on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_RightJoystickCenter=0x7f06001f;
        /**  Key name representing pressing the right joystick down on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_RightJoystickDown=0x7f06001e;
        /**  Key name representing pressing the right joystick left on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_RightJoystickLeft=0x7f06001b;
        /**  Key name representing pressing the right joystick right on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_RightJoystickRight=0x7f06001c;
        /**  Key name representing pressing the right joystick up on an esys/eurobraille/seika ntk braille display. 
         */
        public static final int key_RightJoystickUp=0x7f06001d;
        /**  Name for any of the routing keys on the braille display.  A key in a set of keys located close to the braille line with one key for each braille cell. 
         */
        public static final int key_Routing=0x7f06000a;
        /**  Name for the space key on the braille display. 
         */
        public static final int key_Space=0x7f060001;
        /**  Name for the ETouchLeftFront key on an Alva BC display. 
         */
        public static final int key_albc_ETouchLeftFront=0x7f06005b;
        /**  Alva BC 
 Name for the ETouchLeftRear key on an Alva BC display. 
         */
        public static final int key_albc_ETouchLeftRear=0x7f060059;
        /**  Name for the ETouchRightFront key on an Alva BC display. 
         */
        public static final int key_albc_ETouchRightFront=0x7f06005c;
        /**  Name for the ETouchRightRear key on an Alva BC display. 
         */
        public static final int key_albc_ETouchRightRear=0x7f06005a;
        /**  Name for the SmartpadDown key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadDown=0x7f060062;
        /**  Name for the SmartpadEnter key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadEnter=0x7f060065;
        /**  Name for the SmartpadF1 key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadF1=0x7f06005d;
        /**  Name for the SmartpadF2 key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadF2=0x7f06005e;
        /**  Name for the SmartpadF3 key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadF3=0x7f06005f;
        /**  Name for the SmartpadF4 key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadF4=0x7f060060;
        /**  Name for the SmartpadLeft key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadLeft=0x7f060063;
        /**  Name for the SmartpadRight key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadRight=0x7f060064;
        /**  Name for the SmartpadUp key on an Alva BC display. 
         */
        public static final int key_albc_SmartpadUp=0x7f060061;
        /**  Name for the ThumbDown key on an Alva BC display. 
         */
        public static final int key_albc_ThumbDown=0x7f060069;
        /**  Name for the ThumbHome key on an Alva BC display. 
         */
        public static final int key_albc_ThumbHome=0x7f06006a;
        /**  Name for the ThumbLeft key on an Alva BC display. 
         */
        public static final int key_albc_ThumbLeft=0x7f060066;
        /**  Name for the ThumbRight key on an Alva BC display. 
         */
        public static final int key_albc_ThumbRight=0x7f060067;
        /**  Name for the ThumbUp key on an Alva BC display. 
         */
        public static final int key_albc_ThumbUp=0x7f060068;
        /**  Instructions displayed in the Key Bindings activity. Explains how to use key bindings with a Braille display. 
         */
        public static final int key_bindings_instructions=0x7f060095;
        /**  Title for the Key Bindings activity, which shows the user key bindings for their device. [CHAR_LIMIT=35] 
         */
        public static final int key_bindings_title=0x7f0600c5;
        /**  Key name for pressing the easy bar 1 step down on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarDown1=0x7f060055;
        /**  Key name for pressing the easy bar 2 steps down on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarDown2=0x7f060056;
        /**  Key name for pressing the easy bar 1 step left on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarLeft1=0x7f06004f;
        /**  Key name for pressing the easy bar 2 steps left on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarLeft2=0x7f060050;
        /**  Key name for pressing the easy bar 1 step right on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarRight1=0x7f060051;
        /**  Key name for pressing the easy bar 2 steps right on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarRight2=0x7f060052;
        /**  Key name for pressing the easy bar 1 step up on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarUp1=0x7f060053;
        /**  Key name for pressing the easy bar 2 steps up on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_BarUp2=0x7f060054;
        /**  Name for the left front key on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_LeftKeyFront=0x7f06004d;
        /**  Name for the left rear key on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_LeftKeyRear=0x7f06004e;
        /**  Name for the left thumb key on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_LeftThumb=0x7f060057;
        /**  Braillex 
 Name for the right front key on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_RightKeyFront=0x7f06004b;
        /**  Name for the right rear key on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_RightKeyRear=0x7f06004c;
        /**  Name for the right thumb key on a Papenmeier Braillex display. 
         */
        public static final int key_braillex_RightThumb=0x7f060058;
        /**  Name for the command 1 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Display1=0x7f060039;
        /**  Name for the command 2 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Display2=0x7f06003a;
        /**  Name for the command 4 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Display3=0x7f06003b;
        /**  Name for the command 4 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Display4=0x7f06003c;
        /**  Name for the command 5 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Display5=0x7f06003d;
        /**  Name for the command 6 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Display6=0x7f06003e;
        /**  Brailliant 
 Name for the power key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Power=0x7f060038;
        /**  Name for the thumb 1 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Thumb1=0x7f06003f;
        /**  Name for the thumb 2 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Thumb2=0x7f060040;
        /**  Name for the thumb 3 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Thumb3=0x7f060041;
        /**  Name for the thumb 4 key on a Brailliant braille display. 
         */
        public static final int key_brailliant_Thumb4=0x7f060042;
        /**  Esys keys 
 Key name for pressing one of the front switches to the left on an esys/eurobraille display. 
         */
        public static final int key_esys_SwitchLeft=0x7f060024;
        /**  Key name for pressing one of the front switches to the right on an esys/eurobraille display. 
         */
        public static final int key_esys_SwitchRight=0x7f060025;
        /**  Focus 
 Key name for the left advance key on a freedom scientific focus braille display. 
         */
        public static final int key_focus_LeftAdvance=0x7f060028;
        /**  Name for the left gdf key on a freedomscientific braille display. 
         */
        public static final int key_focus_LeftGdf=0x7f060032;
        /**  Name for pressing the left rocker down on a freedomscientific braille display. 
         */
        public static final int key_focus_LeftRockerDown=0x7f060035;
        /**  Name for pressing the left rocker up on a freedomscientific braille display. 
         */
        public static final int key_focus_LeftRockerUp=0x7f060034;
        /**  Name for the left shift key on a freedomscientific braille display. 
         */
        public static final int key_focus_LeftShift=0x7f060030;
        /**  Key name for moving the left wheel down on a freedom scientific focus braille display. 
         */
        public static final int key_focus_LeftWheelDown=0x7f06002c;
        /**  Key name for pressing the left wheel on a freedom scientific focus braille display. 
         */
        public static final int key_focus_LeftWheelPress=0x7f06002a;
        /**  Key name for moving the left wheel up on a freedom scientific focus braille display. 
         */
        public static final int key_focus_LeftWheelUp=0x7f06002b;
        /**  Key name for the right advance key on a freedom scientific focus braille display. 
         */
        public static final int key_focus_RightAdvance=0x7f060029;
        /**  Name for the right gdf key on a freedomscientific braille display. 
         */
        public static final int key_focus_RightGdf=0x7f060033;
        /**  Name for pressing the right rocker down on a freedomscientific braille display. 
         */
        public static final int key_focus_RightRockerDown=0x7f060037;
        /**  Name for pressing the right rocker up on a freedomscientific braille display. 
         */
        public static final int key_focus_RightRockerUp=0x7f060036;
        /**  Name for the right shift key on a freedomscientific braille display. 
         */
        public static final int key_focus_RightShift=0x7f060031;
        /**  Key name for moving the right wheel down on a freedom scientific focus braille display. 
         */
        public static final int key_focus_RightWheelDown=0x7f06002f;
        /**  Key name for pressing the right wheel on a freedom scientific focus braille display. 
         */
        public static final int key_focus_RightWheelPress=0x7f06002d;
        /**  Key name for moving the right wheel up on a freedom scientific focus braille display. 
         */
        public static final int key_focus_RightWheelUp=0x7f06002e;
        /**  Left and right space bars 
         */
        public static final int key_handytech_LeftSpace=0x7f060071;
        public static final int key_handytech_LeftTrippleActionBottom=0x7f06006c;
        public static final int key_handytech_LeftTrippleActionMiddle=0x7f06006d;
        /**  HandyTech keys 
 Left triple action key 
         */
        public static final int key_handytech_LeftTrippleActionTop=0x7f06006b;
        public static final int key_handytech_RightSpace=0x7f060072;
        public static final int key_handytech_RightTrippleActionBottom=0x7f06006f;
        public static final int key_handytech_RightTrippleActionMiddle=0x7f060070;
        /**  Right triple action key 
         */
        public static final int key_handytech_RightTrippleActionTop=0x7f06006e;
        /**  HWG Brailliant (older model) 
 Name for the display 1 key on a HWG Brailliant display. 
         */
        public static final int key_hwg_brailliant_Display1=0x7f060045;
        /**  Name for the display 2 key on a HWG Brailliant display. 
         */
        public static final int key_hwg_brailliant_Display2=0x7f060046;
        /**  Name for the display 3 key on a HWG Brailliant display. 
         */
        public static final int key_hwg_brailliant_Display3=0x7f060047;
        /**  Name for the display 4 key on a HWG Brailliant display. 
         */
        public static final int key_hwg_brailliant_Display4=0x7f060048;
        /**  Name for the display 5 key on a HWG Brailliant display. 
         */
        public static final int key_hwg_brailliant_Display5=0x7f060049;
        /**  Name for the display 6 key on a HWG Brailliant display. 
         */
        public static final int key_hwg_brailliant_Display6=0x7f06004a;
        /**  Name for pressing long key to the left of center on a Seika Braille display. 
         */
        public static final int key_skbdp_LeftLongKey=0x7f060077;
        /**  Name for pressing left end of left rocker on a Seika Braille display. 
         */
        public static final int key_skbdp_LeftRockerLeft=0x7f060075;
        /**  Name for pressing right end of left rocker on a Seika Braille display. 
         */
        public static final int key_skbdp_LeftRockerRight=0x7f060076;
        /**  Seika Braille Display 
 Name for pressing pan left on a Seika Braille display. 
         */
        public static final int key_skbdp_PanLeft=0x7f060073;
        /**  Name for pressing pan right on a Seika Braille display. 
         */
        public static final int key_skbdp_PanRight=0x7f060074;
        /**  Name for pressing long key to the right of center on a Seika Braille display. 
         */
        public static final int key_skbdp_RightLongKey=0x7f060078;
        /**  Name for pressing left end of right rocker on a Seika Braille display. 
         */
        public static final int key_skbdp_RightRockerLeft=0x7f060079;
        /**  Name for pressing right end on a right rocker on a Seika Braille display. 
         */
        public static final int key_skbdp_RightRockerRight=0x7f06007a;
        /**  Seika NTK 
 Name for pressing pan left key on a Seika NTK display. 
         */
        public static final int key_skntk_PanLeft=0x7f060026;
        /**  Name for pressing pan right key on a Seika NTK display. 
         */
        public static final int key_skntk_PanRight=0x7f060027;
        /**  Text for menu item for adding a custom label. 
         */
        public static final int menu_item_label_add=0x7f0600dd;
        /**  Text for menu item for editing a custom label. 
         */
        public static final int menu_item_label_edit=0x7f0600de;
        /**  Text for menu item for removing a custom label. 
         */
        public static final int menu_item_label_remove=0x7f0600df;
        /**  Text for menu item for telling user to update talkback to support labels. 
         */
        public static final int menu_item_update_talkback=0x7f0600e0;
        /**  Label of the "pan left" button in the overlay. [CHAR_LIMIT=20] 
         */
        public static final int overlay_pan_left_button=0x7f0600cb;
        /**  Label of the "pan right" button in the overlay. [CHAR_LIMIT=20] 
         */
        public static final int overlay_pan_right_button=0x7f0600cc;
        /**  Button label to open accessibility settings from the on-screen overlay tutorial. [CHAR_LIMIT=25] 
         */
        public static final int overlay_tutorial_accessibility_settings_button=0x7f0600d0;
        /**  Message of the dialog prompting the user to view a tutorial of the
         on-screen overlay feature. 
         */
        public static final int overlay_tutorial_dialog_message=0x7f0600d5;
        /**  Title of the dialog prompting the user to view a tutorial of the
         on-screen overlay feature. [CHAR_LIMIT=30] 
         */
        public static final int overlay_tutorial_dialog_title=0x7f0600d4;
        /**  Button label to leave the on-screen overlay tutorial. [CHAR_LIMIT=25] 
         */
        public static final int overlay_tutorial_finish_button=0x7f0600ce;
        /**  Overlay tutorial introduction text. 
         */
        public static final int overlay_tutorial_introduction=0x7f0600cf;
        /**  Overlay tutorial text explaining moving the overlay. 
         */
        public static final int overlay_tutorial_moving=0x7f0600d3;
        /**  Overlay tutorial text explaining panning. 
         */
        public static final int overlay_tutorial_pan=0x7f0600d1;
        /**  Overlay tutorial text explaining routing keys. 
         */
        public static final int overlay_tutorial_routing_keys=0x7f0600d2;
        /**  Title of the Braille overlay tutorial. [CHAR_LIMIT=25] 
         */
        public static final int overlay_tutorial_title=0x7f0600cd;
        /**  Permission description. 
         */
        public static final int permdesc_displayConnect=0x7f0600a2;
        /**  Braille display permission 
 Permission label. 
         */
        public static final int permlab_displayConnect=0x7f0600a1;
        public static final int pref_braille_overlay_key=0x7f06008f;
        /**  Label for the on-screen overlay checkbox preference. [CHAR_LIMIT=45] 
         */
        public static final int pref_braille_overlay_title=0x7f0600c2;
        public static final int pref_braille_overlay_tutorial_key=0x7f060090;
        /**  Clicked to launch the tutorial for the on-screen braille overlay. Appears within "on-screen overlay" category. [CHAR_LIMIT=45] 
         */
        public static final int pref_braille_overlay_tutorial_title=0x7f0600c3;
        /**  Label for the braille table preference that set the translation table from the user's locale. Contains the name of the table used with the current locale. 
         */
        public static final int pref_braille_table_default_label=0x7f0600bd;
        /**  Label for the braille table preference that set the table from the user's locale when there is no table available for the current locale.  For example, if a user locale only has a 6 dot table available, then setting the table to the default for 8 dot braille will show this value in the preference. 
         */
        public static final int pref_braille_table_default_none_label=0x7f0600be;
        public static final int pref_braille_type_default=0x7f06008b;
        /**  Label for the eight dot braille type. One of the possible values of the braille type preference. 
         */
        public static final int pref_braille_type_eight_dot_label=0x7f0600bc;
        public static final int pref_braille_type_eight_dot_value=0x7f06008a;
        public static final int pref_braille_type_key=0x7f060085;
        /**  Label for the six dot braille type. One of the possible values of the braille type preference. 
         */
        public static final int pref_braille_type_six_dot_label=0x7f0600bb;
        public static final int pref_braille_type_six_dot_value=0x7f060089;
        /**  Label for the braille type preference. Let's the user switch between computer and literary braille. [CHAR_LIMIT=45] 
         */
        public static final int pref_braille_type_title=0x7f0600b5;
        public static final int pref_category_braille_key=0x7f060084;
        public static final int pref_category_braille_overlay_key=0x7f06008e;
        /**  Label for the On-screen overlay category. Appears within developer options. [CHAR_LIMIT=30] 
         */
        public static final int pref_category_braille_overlay_title=0x7f0600c1;
        /**  Label for the Braille preferences category. Contains settings for braille translation. [CHAR_LIMIT=45] 
         */
        public static final int pref_category_braille_title=0x7f0600b4;
        public static final int pref_category_developer_key=0x7f06008d;
        /**  Label for the Developer options category. Contains settings for debugging and demos. [CHAR_LIMIT=25] 
         */
        public static final int pref_category_developer_title=0x7f0600c0;
        /**  Preference keys 
         */
        public static final int pref_category_device_key=0x7f060081;
        /**  Label for the Device preferences category. Contains preferences specific to a user's Braille display. [CHAR_LIMIT=45] 
         */
        public static final int pref_category_device_title=0x7f0600b1;
        public static final int pref_category_miscellaneous_key=0x7f06008c;
        /**  Label for the Miscellaneous category. Contains options not in the other main categories.. [CHAR_LIMIT=25] 
         */
        public static final int pref_category_miscellaneous_title=0x7f0600bf;
        public static final int pref_connection_status_key=0x7f060082;
        /**  Label for the status preference. [CHAR_LIMIT=45] 
         */
        public static final int pref_connection_status_title=0x7f0600b2;
        public static final int pref_eight_dot_braille_table_key=0x7f060087;
        /**  Label for the 8 dot (computer braille) table preference. Pops up the list of computer braille tables. [CHAR_LIMIT=45] 
         */
        public static final int pref_eight_dot_braille_table_title=0x7f0600b7;
        public static final int pref_key_bindings_key=0x7f060083;
        /**  Label for the Key Bindings preference. Displays an activity that shows the user key bindings for their device. [CHAR_LIMIT=45] 
         */
        public static final int pref_key_bindings_title=0x7f0600b3;
        public static final int pref_log_level_default=0x7f060092;
        /**  Log level preference 
         */
        public static final int pref_log_level_key=0x7f060091;
        /**  Label for the developer "log output" level preference. [CHAR_LIMIT=45] 
         */
        public static final int pref_log_level_label=0x7f0600c4;
        public static final int pref_six_dot_braille_table_key=0x7f060086;
        /**  Label for the 6 dot (literary braille) preference. Pops up the list of literary braille tables. [CHAR_LIMIT=45] 
         */
        public static final int pref_six_dot_braille_table_title=0x7f0600b6;
        /**  Title for the BrailleBack Preferences activity. 
         */
        public static final int preferences_title=0x7f0600b0;
        /**  Label for search dialog. Argument is search text. This is shown on
         screen in a popup window. [CHAR_LIMIT=15]
         */
        public static final int search_dialog_label=0x7f0600d7;
        /**  Prefix indicating displayed text is a search result.
         Argument is search result. Should be as short as possible to
         accommodate smaller displays. [CHAR_LIMIT=3]
         */
        public static final int search_result_prefix=0x7f0600d6;
        /**  Label for checkbox in search tutorial. If checked will prevent the
         tutorial from showing up again in the future. 
         */
        public static final int search_tutorial_checkbox=0x7f0600db;
        /**  Text for the button closing the search tutorial. After closing
         the tutorial, continues onto search mode.
         */
        public static final int search_tutorial_close_button=0x7f0600dc;
        /**  Instructions in search tutorial. A general overview of the search
         feature. Arguments will be command keys
         */
        public static final int search_tutorial_instructions_general=0x7f0600d9;
        /**  More specific instructions in search tutorial. Includes specific
         key commands corresponding to the braille display. May not be shown
         if there is not display connected 
         */
        public static final int search_tutorial_instructions_specific=0x7f0600da;
        /**  Title in search tutorial. 
         */
        public static final int search_tutorial_title=0x7f0600d8;
        /**  Displayed on the accessibility settings screen when the user has selected BrailleBack. Note that in the phrase "the letter l", the letter is a lowercase L, not an uppercase I. 
         */
        public static final int service_description=0x7f060097;
        public static final int service_label=0x7f06007c;
        /**  Shown on the braille display when brailleback is being destroyed. This string has a short size limit to fit on small braille displays. It should not be capitalized, because that can take up extra space on the display. [CHAR_LIMIT=12]
         */
        public static final int shutting_down=0x7f0600c7;
        /**  Braille table dispaly name template. Used for a 6 dot braille table when there are more than one contraction grades available. Contains the locale name and the contractiion grade as an integer. 
         */
        public static final int table_name_grade=0x7f0600ca;
        /**  Used when the user hasn't specified any table and it is determined by the user locale. 
         */
        public static final int table_value_default=0x7f060088;
        /**  Label for the button that switches from the BrailleBack input method to the system keyboard. 
         */
        public static final int tap_to_switch_ime=0x7f0600c9;
        /**  Braille description for an unlabeled button. 
         */
        public static final int type_button=0x7f0600ad;
        /**  Braille description for an editable text.  Used when the edit box has no hint text or label. 
         */
        public static final int type_edittext=0x7f0600ab;
        /**  Braille description for an epty grid view. 
         */
        public static final int type_emptygridview=0x7f0600a5;
        /**  Braille description for an empty list view. 
         */
        public static final int type_emptylistview=0x7f0600a7;
        /**  Braille description for an empty scrollable view. 
         */
        public static final int type_emptyscrollview=0x7f0600a9;
        /**  Braille description for a grid view with some content. 
         */
        public static final int type_gridview=0x7f0600a6;
        /**  Braille description for an unlabeled image. 
         */
        public static final int type_image=0x7f0600ac;
        /**  Braille description for a list view with some content. 
         */
        public static final int type_listview=0x7f0600a8;
        /**  Braille description for a quick contact badge. 
         */
        public static final int type_quickcontact=0x7f0600af;
        /**  Braille description for a scrollable view with some content. 
         */
        public static final int type_scrollview=0x7f0600aa;
        /**  Braille description for a seek control. 
         */
        public static final int type_seekbar=0x7f0600ae;
    }
    public static final class xml {
        public static final int accessibilityservice=0x7f040000;
        public static final int method=0x7f040001;
        public static final int preferences=0x7f040002;
        public static final int tablelist=0x7f040003;
    }
    public static final class styleable {
        /** Attributes that can be used with a BrailleView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #BrailleView_android_textColor android:textColor}</code></td><td></td></tr>
           <tr><td><code>{@link #BrailleView_android_textSize android:textSize}</code></td><td></td></tr>
           <tr><td><code>{@link #BrailleView_cellHeight com.googlecode.eyesfree.brailleback:cellHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #BrailleView_cellPadding com.googlecode.eyesfree.brailleback:cellPadding}</code></td><td></td></tr>
           <tr><td><code>{@link #BrailleView_cellWidth com.googlecode.eyesfree.brailleback:cellWidth}</code></td><td></td></tr>
           <tr><td><code>{@link #BrailleView_dotRadius com.googlecode.eyesfree.brailleback:dotRadius}</code></td><td> Dots are drawn with their centres along an inner rectangle,
             which is of maximum size cellWidth x cellHeight.</td></tr>
           <tr><td><code>{@link #BrailleView_highlightDrawable com.googlecode.eyesfree.brailleback:highlightDrawable}</code></td><td></td></tr>
           </table>
           @see #BrailleView_android_textColor
           @see #BrailleView_android_textSize
           @see #BrailleView_cellHeight
           @see #BrailleView_cellPadding
           @see #BrailleView_cellWidth
           @see #BrailleView_dotRadius
           @see #BrailleView_highlightDrawable
         */
        public static final int[] BrailleView = {
            0x01010095, 0x01010098, 0x7f010000, 0x7f010001,
            0x7f010002, 0x7f010003, 0x7f010004
        };
        /**
          <p>This symbol is the offset where the {@link android.R.attr#textColor}
          attribute's value can be found in the {@link #BrailleView} array.
          @attr name android:textColor
        */
        public static final int BrailleView_android_textColor = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#textSize}
          attribute's value can be found in the {@link #BrailleView} array.
          @attr name android:textSize
        */
        public static final int BrailleView_android_textSize = 0;
        /**
          <p>This symbol is the offset where the {@link com.googlecode.eyesfree.brailleback.R.attr#cellHeight}
          attribute's value can be found in the {@link #BrailleView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.googlecode.eyesfree.brailleback:cellHeight
        */
        public static final int BrailleView_cellHeight = 4;
        /**
          <p>This symbol is the offset where the {@link com.googlecode.eyesfree.brailleback.R.attr#cellPadding}
          attribute's value can be found in the {@link #BrailleView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.googlecode.eyesfree.brailleback:cellPadding
        */
        public static final int BrailleView_cellPadding = 5;
        /**
          <p>This symbol is the offset where the {@link com.googlecode.eyesfree.brailleback.R.attr#cellWidth}
          attribute's value can be found in the {@link #BrailleView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.googlecode.eyesfree.brailleback:cellWidth
        */
        public static final int BrailleView_cellWidth = 3;
        /**
          <p>
          @attr description
           Dots are drawn with their centres along an inner rectangle,
             which is of maximum size cellWidth x cellHeight. This inner
             rectangle is surrounded by the given amount of cell padding.
             The cell padding should always be greater than the dot radius. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.googlecode.eyesfree.brailleback:dotRadius
        */
        public static final int BrailleView_dotRadius = 2;
        /**
          <p>This symbol is the offset where the {@link com.googlecode.eyesfree.brailleback.R.attr#highlightDrawable}
          attribute's value can be found in the {@link #BrailleView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.googlecode.eyesfree.brailleback:highlightDrawable
        */
        public static final int BrailleView_highlightDrawable = 6;
    };
}
